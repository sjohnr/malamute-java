<class
    name = "mlm_client"
    title = "Malamute Client"
    script = "zproto_client_c"
    protocol_class = "mlm_proto"
    package_dir = "../include"
    package = "org/zeromq/malamute/client"
    project_header = "mlm_classes.h"
    export_macro = "MLM_EXPORT"
    >
    This is a client implementation of the Malamute Protocol
    <include filename = "license.xml" />

    <state name = "start">
        <event name = "set plain auth">
            <action name = "use plain security mechanism" />
            <action name = "signal success" />
        </event>
        <event name = "connect" next = "connecting">
            <!-- This action should be called before "set client address" -->
            <action name = "remember client address" />
            <action name = "connect to server endpoint" />
            <action name = "set client address" />
            <action name = "use connect timeout" />
            <action name = "send" message = "CONNECTION OPEN" />
        </event>
        <event name = "bad endpoint">
            <action name = "signal bad endpoint" />
        </event>
        <event name = "destructor">
            <action name = "signal success" />
            <action name = "terminate" />
        </event>
        <!-- before we can do this, we need to connect -> immediately generate fail -->
        <event name = "set producer">
            <action name = "signal failure" />
        </event>
        <!-- before we can do this, we need to connect -> immediately generate fail -->
        <event name = "set consumer">
            <action name = "signal failure" />
        </event>
        <!-- before we can do this, we need to connect -> immediately generate fail -->
        <event name = "remove consumer">
            <action name = "signal failure" />
        </event>
        <!-- before we can do this, we need to connect -> immediately generate fail -->
        <event name = "set worker">
            <action name = "signal failure" />
        </event>
        <event name = "*">
            <!-- Discard any other incoming events -->
        </event>
    </state>

    <state name = "connecting" inherit = "defaults">
        <event name = "OK" next = "connected">
            <action name = "client is connected" />
            <action name = "signal success" />
        </event>
        <event name = "expired" next = "start">
            <action name = "signal server not present" />
        </event>
    </state>

    <state name = "connected" inherit = "defaults">
        <event name = "set producer" next = "confirming">
            <action name = "prepare stream write command" />
            <action name = "send" message = "STREAM WRITE" />
        </event>
        <event name = "set consumer" next = "confirming">
            <action name = "prepare stream read command" />
            <action name = "send" message = "STREAM READ" />
        </event>
        <event name = "remove consumer" next = "confirming">
            <action name = "prepare stream cancel command" />
            <action name = "send" message = "STREAM CANCEL" />
        </event>
        <event name = "set worker" next = "confirming">
            <action name = "prepare service offer command" />
            <action name = "send" message = "SERVICE OFFER" />
        </event>
        <event name = "destructor" next = "terminating">
            <action name = "send" message = "CONNECTION CLOSE" />
        </event>
        <event name = "bad pattern">
            <action name = "signal bad pattern" />
        </event>
        <event name = "STREAM DELIVER">
            <action name = "recv" message = "STREAM DELIVER" />
        </event>
        <event name = "MAILBOX DELIVER">
            <action name = "recv" message = "MAILBOX DELIVER" />
        </event>
        <event name = "SERVICE DELIVER">
            <action name = "recv" message = "SERVICE DELIVER" />
        </event>
    </state>

    <state name = "confirming" inherit = "defaults">
        <event name = "expired" next = "disconnected">
            <action name = "server has gone offline" />
            <action name = "signal failure" />
        </event>
        <event name = "OK" next = "connected">
            <action name = "signal success" />
        </event>
        <event name = "ERROR" next = "have error">
            <action name = "signal failure" />
            <action name = "check status code" />
        </event>
        <!-- if we receive PONG from server, we still need to wait for the response from the server -->
        <event name = "CONNECTION PONG">
        </event>
        <event name = "STREAM DELIVER">
            <action name = "pass stream message to app" />
        </event>
        <event name = "MAILBOX DELIVER">
            <action name = "pass mailbox message to app" />
        </event>
        <event name = "SERVICE DELIVER">
            <action name = "pass service message to app" />
        </event>
    </state>

    <!-- After client calls destructor -->
    <state name = "terminating" inherit = "defaults">
        <event name = "OK">
            <action name = "signal success" />
            <action name = "terminate" />
        </event>
        <event name = "expired">
            <action name = "signal failure" />
            <action name = "terminate" />
        </event>
        <!-- Even if we still receive PONGS from server, we are going to shutdown -->
        <event name = "CONNECTION PONG">
        </event>
        <event name = "ERROR">
            <action name = "signal failure" />
            <action name = "terminate" />
        </event>
    </state>

    <!-- After server sends ERROR for our PING -->
    <state name = "reconnecting" inherit = "defaults">
        <event name = "OK">
            <action name = "client is connected" />
            <action name = "get first replay command" />
        </event>
        <event name = "ERROR">
            <!-- If we sent multiple PINGs, ignore further ERRORs -->
        </event>
        <!-- Replay commands, looping in same state -->
        <event name = "set producer">
            <action name = "send" message = "STREAM WRITE" />
            <action name = "get next replay command" />
        </event>
        <event name = "set consumer">
            <action name = "send" message = "STREAM READ" />
            <action name = "get next replay command" />
        </event>
        <event name = "remove consumer">
            <action name = "send" message = "STREAM CANCEL" />
            <action name = "get next replay command" />
        </event>
        <event name = "set worker">
            <action name = "send" message = "SERVICE OFFER" />
            <action name = "get next replay command" />
        </event>
        <event name = "replay ready" next = "connected">
            <action name = "client is connected" />
        </event>
        <!-- if we receive PONG from server, we still need to wait until replay would finish -->
        <event name = "CONNECTION PONG">
        </event>
    </state>

    <!-- Server is gone, wait for it to return -->
    <state name = "disconnected" inherit = "defaults">
        <!-- before we can do this, we need to connect -> immediately generate fail -->
        <event name = "set producer">
            <action name = "signal failure" />
        </event>
        <!-- before we can do this, we need to connect -> immediately generate fail -->
        <event name = "set consumer">
            <action name = "signal failure" />
        </event>
        <!-- before we can do this, we need to connect -> immediately generate fail -->
        <event name = "remove consumer">
            <action name = "signal failure" />
        </event>
        <!-- before we can do this, we need to connect -> immediately generate fail -->
        <event name = "set worker">
            <action name = "signal failure" />
        </event>
        <event name = "destructor">
            <action name = "signal success" />
            <action name = "terminate" />
        </event>
    </state>

    <state name = "defaults">
        <!-- Heartbeating logic in client -->
        <event name = "heartbeat">
            <action name = "send" message = "CONNECTION PING" />
        </event>
        <event name = "CONNECTION PONG" next = "connected">
            <action name = "client is connected" />
        </event>
        <event name = "expired" next = "disconnected">
            <action name = "server has gone offline" />
        </event>
        <event name = "ERROR" next = "have error">
            <action name = "check status code" />
        </event>
        <event name = "*">
            <!-- Discard any other incoming events -->
        </event>
    </state>

    <state name = "have error">
        <event name = "command invalid" next = "reconnecting">
            <action name = "set client address" />
            <action name = "use connect timeout" />
            <action name = "send" message = "CONNECTION OPEN" />
        </event>
        <event name = "failed">
            <action name = "signal failure" />
            <action name = "terminate" />
        </event>
        <event name = "other">
            <action name = "announce unhandled error" />
            <action name = "terminate" />
        </event>
    </state>

    <!-- API methods -->
    <method name = "set plain auth" return = "status">
    Set PLAIN authentication username and password. If you do not call this,
    the client will use NULL authentication. TODO: add "set curve auth".
        <field name = "username" type = "string" />
        <field name = "password" type = "string" />
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

    <method name = "connect" return = "status">
    Connect to server endpoint, with specified timeout in msecs (zero means
    wait forever). Constructor succeeds if connection is successful. The caller
    may specify its address.
        <field name = "endpoint" type = "string">Endpoint to connect to</field>
        <field name = "timeout" type = "number" size = "4">Timeout in msecs</field>
        <field name = "address" type = "string">Unique address of caller, if any</field>
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

    <method name = "destructor" return = "status">
    Disconnect from server. Waits for a short timeout for confirmation from
    the server, then disconnects anyhow.
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

    <reply name = "SUCCESS">
        <field name = "status" type = "integer" />
    </reply>

    <reply name = "FAILURE">
        <field name = "status" type = "integer" />
        <field name = "reason" type = "string" />
    </reply>

    <method name = "set producer" return = "status">
    Prepare to publish to a specified stream. After this, all messages
    are sent to this stream exclusively.
        <field name = "stream" type = "string" />
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

    <method name = "set consumer" return = "status">
    Consume messages with matching subjects. The pattern is a regular
    expression using the CZMQ zrex syntax. The most useful elements are:
    ^ and $ to match the start and end, . to match any character, \s and
    \S to match whitespace and non-whitespace, \d and \D to match a digit
    and non-digit, \a and \A to match alphabetic and non-alphabetic, \w
    and \W to match alphanumeric and non-alphanumeric, + for one or more
    repetitions, * for zero or more repetitions, and ( ) to create groups.
    Returns true if subscription was successful, else false.
        <field name = "stream" type = "string" />
        <field name = "pattern" type = "string" />
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

    <method name = "remove consumer" return = "status">
    Remove all subscriptions to a stream.
        <field name = "stream" type = "string" />
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

    <method name = "set worker" return = "status">
    Offer a particular named service, where the pattern matches request
    subjects using the CZMQ zrex syntax.
        <field name = "address" type = "string" />
        <field name = "pattern" type = "string" />
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

    <!-- This defines the asynchronous send interface -->
    <send>
        <message name = "STREAM SEND" method = "send" />
        <message name = "MAILBOX SEND" method = "sendto" />
        <message name = "SERVICE SEND" method = "sendfor" />
    </send>

    <!-- This defines the asynchronous recv interface -->
    <recv>
        <message name = "STREAM DELIVER" />
        <message name = "MAILBOX DELIVER" />
        <message name = "SERVICE DELIVER" />
    </recv>

    <!-- Include custom hand-written methods -->
    <custom filename = "mlm_client_custom.xml" language = "C" />
</class>
