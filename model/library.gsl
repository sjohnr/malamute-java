.template 0
#
#   Library functions
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

function expand_headers ()
    for message
        if !defined (message.id)
            message.id = item ()
        endif
        for field where item () = 1
            for class.header
                for field as hfield
                    copy hfield before field
                endfor
            endfor
        else
            for class.header
                for field as hfield
                    copy hfield to message
                endfor
            endfor
        endfor
    endfor
endfunction

function set_defaults ()
    resolve_types ()

    class.signature ?= 0
    class.source_dir ?= "."
    if switches.zproject ?= 1 & switches.private ?= 1
        class.package_dir ?= "."
    else
        class.package_dir ?= "../include"
    endif

    class.export_macro ?= ""
    if class.export_macro <> ""
        class.export_macro += " "
    endif

    for message
        message.name = "$(message.name:c)"
        for field
            field.name = "$(field.name:c)"
            if type = "number"
                field.size ?= 1
                if size = 1
                    field.ctype = "byte"
                elsif size = 2
                    field.ctype = "uint16_t"
                elsif size = 4
                    field.ctype = "uint32_t"
                elsif size = 8
                    field.ctype = "uint64_t"
                else
                    echo "E: bad size $(size) for $(name)"
                endif
            endif
            for class.field as cfield where cfield.name = field.name
                if cfield.type <> field.type
                    echo "E: field '$(name)' must have same type everywhere"
                endif
            else
                copy field to class
            endfor
        endfor
    endfor
endfunction

function resolve_types ()
    for class.message
        for field as original_field
            for class.type where type.name = original_field.type
                for type.field as type_field
                    new field before original_field
                        field.name = original_field.name + " " + type_field.name
                        field.type = type_field.type
                        field.size = type_field.size? 0
                        field.     = type_field.?''
                        for original_field.test where test.name = type_field.name
                            copy test to field
                        endfor
                    endnew
                endfor
                delete original_field
            endfor
        endfor
    endfor
endfunction

function resolve_includes ()
    for class.include
        if defined (include.filename)
            my.include_file = class.load_file (filename)
            if defined (my.include_file)
                move my.include_file after include
            else
                echo "E: error loading include file: $(filename): $(xml.error?)"
            endif
        else
            echo "E: required attribute 'filename' not defined"
        endif
    endfor
endfunction

function java_class_name(name)
    my.neat_name = "$(Name:c)"
    return "$(string.replace(my.neat_name, '_'))"
endfunction

function java_var_name(name)
    my.neat_name = "$(java_class_name(Name))"
    my.first_char = string.substr(my.neat_name, 0, 0)
    
    return "$(my.first_char)" + string.substr(my.neat_name, 1, string.length(my.neat_name))
endfunction

function java_package_name(package)
    return "$(string.replace(my.package, '/|.'))"
endfunction

function stem_s(name)
    my.retval = "$(Name)"
    my.last_char = string.substr(my.retval, string.length(my.retval)-1, string.length(my.retval))
    if my.last_char = "s"
        my.retval = string.substr(my.retval, 0, string.length(my.retval)-2)
    endif
    
    return my.retval
endfunction

function java_protocol_class()
    neatClass = "$(Protocol_class)"
    return "$(string.replace (neatClass, '_'))"
endfunction
.endtemplate